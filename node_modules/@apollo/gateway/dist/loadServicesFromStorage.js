"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const envOverridePartialSchemaBaseUrl = 'APOLLO_PARTIAL_SCHEMA_BASE_URL';
const envOverrideStorageSecretBaseUrl = 'APOLLO_STORAGE_SECRET_BASE_URL';
const urlFromEnvOrDefault = (envKey, fallback) => (process.env[envKey] || fallback).replace(/\/$/, '');
const urlPartialSchemaBase = urlFromEnvOrDefault(envOverridePartialSchemaBaseUrl, 'https://storage.googleapis.com/engine-partial-schema-prod/');
const urlStorageSecretBase = urlFromEnvOrDefault(envOverrideStorageSecretBaseUrl, 'https://storage.googleapis.com/engine-partial-schema-prod/');
function getStorageSecretUrl(graphId, apiKeyHash) {
    return `${urlStorageSecretBase}/${graphId}/storage-secret/${apiKeyHash}.json`;
}
function getServiceDefinitionsFromStorage({ graphId, apiKeyHash, graphVariant, federationVersion, fetcher, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const storageSecretUrl = getStorageSecretUrl(graphId, apiKeyHash);
        const secret = yield fetcher(storageSecretUrl).then(response => response.json());
        if (!graphVariant) {
            graphVariant = 'current';
        }
        const baseUrl = `${urlPartialSchemaBase}/${secret}/${graphVariant}/v${federationVersion}`;
        const response = yield fetcher(`${baseUrl}/composition-config-link`);
        if (response.status === 304) {
            return { isNewSchema: false };
        }
        const linkFileResult = yield response.json();
        const compositionMetadata = yield fetcher(`${urlPartialSchemaBase}/${linkFileResult.configPath}`).then(response => response.json());
        const serviceDefinitions = yield Promise.all(compositionMetadata.implementingServiceLocations.map(({ name, path }) => __awaiter(this, void 0, void 0, function* () {
            const { url, partialSchemaPath } = yield fetcher(`${urlPartialSchemaBase}/${path}`).then(response => response.json());
            const sdl = yield fetcher(`${urlPartialSchemaBase}/${partialSchemaPath}`).then(response => response.text());
            return { name, url, typeDefs: graphql_1.parse(sdl) };
        })));
        return {
            serviceDefinitions,
            compositionMetadata,
            isNewSchema: true,
        };
    });
}
exports.getServiceDefinitionsFromStorage = getServiceDefinitionsFromStorage;
//# sourceMappingURL=loadServicesFromStorage.js.map